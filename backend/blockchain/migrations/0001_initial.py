# Generated by Django 4.2.7 on 2025-08-22 12:25

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Tree',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the record was last updated')),
                ('tree_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the tree', primary_key=True, serialize=False)),
                ('mint_address', models.CharField(db_index=True, help_text='Solana mint address for the compressed NFT', max_length=44, unique=True)),
                ('merkle_tree_address', models.CharField(db_index=True, help_text='Address of the Merkle tree containing this NFT', max_length=44)),
                ('leaf_index', models.PositiveIntegerField(db_index=True, help_text='Index of the leaf in the Merkle tree')),
                ('asset_id', models.CharField(db_index=True, help_text='Unique asset ID for the compressed NFT', max_length=64, unique=True)),
                ('species', models.CharField(db_index=True, help_text='Tree species name', max_length=100)),
                ('planted_date', models.DateField(db_index=True, help_text='Date when the tree was planted')),
                ('location_latitude', models.DecimalField(decimal_places=8, help_text='Latitude coordinate of tree location', max_digits=10, validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)])),
                ('location_longitude', models.DecimalField(decimal_places=8, help_text='Longitude coordinate of tree location', max_digits=11, validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ('location_name', models.CharField(help_text='Human-readable location name', max_length=200)),
                ('status', models.CharField(choices=[('planted', 'Planted'), ('growing', 'Growing'), ('mature', 'Mature'), ('harvested', 'Harvested'), ('dead', 'Dead')], db_index=True, default='planted', help_text='Current status of the tree', max_length=20)),
                ('height_cm', models.PositiveIntegerField(blank=True, help_text='Current height of the tree in centimeters', null=True)),
                ('diameter_cm', models.DecimalField(blank=True, decimal_places=2, help_text='Diameter at breast height in centimeters', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('estimated_carbon_kg', models.DecimalField(decimal_places=3, default=Decimal('0.000'), help_text='Estimated carbon sequestered in kilograms', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('verified_carbon_kg', models.DecimalField(blank=True, decimal_places=3, help_text='Verified carbon sequestered in kilograms', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('last_measurement_date', models.DateField(blank=True, help_text='Date of last physical measurement', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the tree')),
                ('image_url', models.URLField(blank=True, help_text='URL to tree image')),
                ('verification_status', models.CharField(choices=[('pending', 'Pending'), ('verified', 'Verified'), ('rejected', 'Rejected')], db_index=True, default='pending', help_text='Verification status of the tree data', max_length=20)),
                ('owner', models.ForeignKey(help_text='Owner of the tree NFT', on_delete=django.db.models.deletion.PROTECT, related_name='owned_trees', to=settings.AUTH_USER_MODEL)),
                ('planter', models.ForeignKey(blank=True, help_text='Person who planted the tree', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='planted_trees', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tree',
                'verbose_name_plural': 'Trees',
                'db_table': 'blockchain_tree',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SpeciesGrowthParameters',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the record was last updated')),
                ('species', models.CharField(db_index=True, help_text='Tree species name', max_length=100)),
                ('region', models.CharField(db_index=True, help_text='Geographic region where parameters apply', max_length=100)),
                ('height_asymptote_cm', models.DecimalField(decimal_places=2, help_text='Asymptotic maximum height (A parameter) in centimeters', max_digits=8, validators=[django.core.validators.MinValueValidator(0)])),
                ('height_growth_rate', models.DecimalField(decimal_places=6, help_text='Height growth rate parameter (k)', max_digits=8, validators=[django.core.validators.MinValueValidator(0)])),
                ('height_shape_parameter', models.DecimalField(decimal_places=4, help_text='Height shape parameter (p)', max_digits=6, validators=[django.core.validators.MinValueValidator(0)])),
                ('diameter_asymptote_cm', models.DecimalField(decimal_places=2, help_text='Asymptotic maximum diameter (A parameter) in centimeters', max_digits=8, validators=[django.core.validators.MinValueValidator(0)])),
                ('diameter_growth_rate', models.DecimalField(decimal_places=6, help_text='Diameter growth rate parameter (k)', max_digits=8, validators=[django.core.validators.MinValueValidator(0)])),
                ('diameter_shape_parameter', models.DecimalField(decimal_places=4, help_text='Diameter shape parameter (p)', max_digits=6, validators=[django.core.validators.MinValueValidator(0)])),
                ('biomass_asymptote_kg', models.DecimalField(decimal_places=3, help_text='Asymptotic maximum biomass (A parameter) in kilograms', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('biomass_growth_rate', models.DecimalField(decimal_places=6, help_text='Biomass growth rate parameter (k)', max_digits=8, validators=[django.core.validators.MinValueValidator(0)])),
                ('biomass_shape_parameter', models.DecimalField(decimal_places=4, help_text='Biomass shape parameter (p)', max_digits=6, validators=[django.core.validators.MinValueValidator(0)])),
                ('carbon_conversion_factor', models.DecimalField(decimal_places=3, default=Decimal('0.470'), help_text='Factor to convert biomass to carbon content (0-1)', max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('data_source', models.CharField(help_text='Source of the growth parameters data', max_length=200)),
                ('study_year', models.PositiveIntegerField(help_text='Year when the study was conducted')),
                ('sample_size', models.PositiveIntegerField(blank=True, help_text='Number of trees in the study sample', null=True)),
                ('r_squared', models.DecimalField(blank=True, decimal_places=4, help_text='R-squared value indicating model fit quality', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether these parameters are currently active')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the parameters')),
            ],
            options={
                'verbose_name': 'Species Growth Parameters',
                'verbose_name_plural': 'Species Growth Parameters',
                'db_table': 'blockchain_species_growth_parameters',
                'ordering': ['species', 'region'],
                'indexes': [models.Index(fields=['species'], name='blockchain__species_970854_idx'), models.Index(fields=['region'], name='blockchain__region_b205ee_idx'), models.Index(fields=['species', 'region'], name='blockchain__species_c06dd4_idx'), models.Index(fields=['is_active'], name='blockchain__is_acti_c42ba6_idx'), models.Index(fields=['created_at'], name='blockchain__created_6dab64_idx')],
                'unique_together': {('species', 'region')},
            },
        ),
        migrations.CreateModel(
            name='CarbonMarketPrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the record was last updated')),
                ('market_name', models.CharField(db_index=True, help_text="Name of the carbon market (e.g., 'California Cap-and-Trade')", max_length=100)),
                ('market_type', models.CharField(choices=[('compliance', 'Compliance Market'), ('voluntary', 'Voluntary Market'), ('regional', 'Regional Market'), ('international', 'International Market')], db_index=True, help_text='Type of carbon market', max_length=50)),
                ('price_date', models.DateField(db_index=True, help_text='Date of the price quote')),
                ('price_usd_per_ton', models.DecimalField(decimal_places=4, help_text='Price in USD per metric ton of CO2 equivalent', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('currency', models.CharField(default='USD', help_text='Currency code (ISO 4217)', max_length=3)),
                ('volume_tons', models.DecimalField(blank=True, decimal_places=3, help_text='Trading volume in metric tons', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('opening_price', models.DecimalField(blank=True, decimal_places=4, help_text='Opening price for the trading day', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('closing_price', models.DecimalField(blank=True, decimal_places=4, help_text='Closing price for the trading day', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('high_price', models.DecimalField(blank=True, decimal_places=4, help_text='Highest price during the trading day', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('low_price', models.DecimalField(blank=True, decimal_places=4, help_text='Lowest price during the trading day', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('data_source', models.CharField(help_text='Source of the price data', max_length=200)),
                ('source_url', models.URLField(blank=True, help_text='URL to the original data source')),
                ('data_quality', models.CharField(choices=[('high', 'High Quality'), ('medium', 'Medium Quality'), ('low', 'Low Quality'), ('estimated', 'Estimated')], db_index=True, default='medium', help_text='Quality assessment of the price data', max_length=20)),
                ('credit_type', models.CharField(default='forestry', help_text="Type of carbon credit (e.g., 'forestry', 'renewable_energy')", max_length=100)),
                ('vintage_year', models.PositiveIntegerField(blank=True, help_text='Vintage year of the carbon credits', null=True)),
                ('certification_standard', models.CharField(blank=True, help_text="Certification standard (e.g., 'VCS', 'Gold Standard')", max_length=100)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the price data')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this price data is currently active')),
            ],
            options={
                'verbose_name': 'Carbon Market Price',
                'verbose_name_plural': 'Carbon Market Prices',
                'db_table': 'blockchain_carbon_market_price',
                'ordering': ['-price_date', 'market_name'],
                'indexes': [models.Index(fields=['market_name'], name='blockchain__market__39be71_idx'), models.Index(fields=['market_type'], name='blockchain__market__1d97eb_idx'), models.Index(fields=['price_date'], name='blockchain__price_d_79351f_idx'), models.Index(fields=['market_name', 'price_date'], name='blockchain__market__a5b25b_idx'), models.Index(fields=['credit_type'], name='blockchain__credit__185a85_idx'), models.Index(fields=['data_quality'], name='blockchain__data_qu_68a2e3_idx'), models.Index(fields=['is_active'], name='blockchain__is_acti_e4186d_idx'), models.Index(fields=['created_at'], name='blockchain__created_4ba35e_idx')],
                'unique_together': {('market_name', 'price_date', 'credit_type')},
            },
        ),
        migrations.CreateModel(
            name='TreeCarbonData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the record was last updated')),
                ('measurement_date', models.DateField(db_index=True, help_text='Date when the measurement was taken')),
                ('measurement_method', models.CharField(choices=[('direct', 'Direct Measurement'), ('allometric', 'Allometric Equation'), ('remote_sensing', 'Remote Sensing'), ('model_prediction', 'Model Prediction'), ('estimated', 'Estimated')], db_index=True, help_text='Method used to determine carbon content', max_length=50)),
                ('above_ground_carbon_kg', models.DecimalField(decimal_places=3, help_text='Above-ground carbon content in kilograms', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('below_ground_carbon_kg', models.DecimalField(blank=True, decimal_places=3, help_text='Below-ground (root) carbon content in kilograms', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_carbon_kg', models.DecimalField(decimal_places=3, help_text='Total carbon content in kilograms', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('tree_height_cm', models.PositiveIntegerField(blank=True, help_text='Tree height at time of measurement in centimeters', null=True)),
                ('tree_diameter_cm', models.DecimalField(blank=True, decimal_places=2, help_text='Tree diameter at breast height in centimeters', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('biomass_kg', models.DecimalField(blank=True, decimal_places=3, help_text='Total biomass in kilograms', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('data_quality', models.CharField(choices=[('high', 'High Quality'), ('medium', 'Medium Quality'), ('low', 'Low Quality'), ('estimated', 'Estimated')], db_index=True, default='medium', help_text='Quality assessment of the carbon data', max_length=20)),
                ('verification_status', models.CharField(choices=[('pending', 'Pending Verification'), ('verified', 'Verified'), ('rejected', 'Rejected'), ('disputed', 'Disputed')], db_index=True, default='pending', help_text='Verification status of the carbon data', max_length=20)),
                ('verification_date', models.DateTimeField(blank=True, help_text='Date when the data was verified', null=True)),
                ('market_price_usd_per_ton', models.DecimalField(blank=True, decimal_places=4, help_text='Market price used for valuation (USD per ton)', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('carbon_credit_value_usd', models.DecimalField(blank=True, decimal_places=4, help_text='Calculated carbon credit value in USD', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('data_source', models.CharField(help_text='Source of the carbon measurement data', max_length=200)),
                ('measurement_equipment', models.CharField(blank=True, help_text='Equipment used for measurement', max_length=200)),
                ('allometric_equation', models.CharField(blank=True, help_text='Allometric equation used for calculation', max_length=500)),
                ('confidence_interval', models.DecimalField(blank=True, decimal_places=2, help_text='Confidence interval percentage for the measurement', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the carbon measurement')),
                ('weather_conditions', models.CharField(blank=True, help_text='Weather conditions during measurement', max_length=200)),
                ('measured_by', models.ForeignKey(blank=True, help_text='User who took the measurement', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='measured_carbon_data', to=settings.AUTH_USER_MODEL)),
                ('tree', models.ForeignKey(help_text='Tree this carbon data belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='carbon_data', to='blockchain.tree')),
                ('verified_by', models.ForeignKey(blank=True, help_text='User who verified this carbon data', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_carbon_data', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tree Carbon Data',
                'verbose_name_plural': 'Tree Carbon Data',
                'db_table': 'blockchain_tree_carbon_data',
                'ordering': ['-measurement_date'],
                'indexes': [models.Index(fields=['tree'], name='blockchain__tree_id_478b0e_idx'), models.Index(fields=['measurement_date'], name='blockchain__measure_5d922b_idx'), models.Index(fields=['tree', 'measurement_date'], name='blockchain__tree_id_2d2a04_idx'), models.Index(fields=['measurement_method'], name='blockchain__measure_c5ba21_idx'), models.Index(fields=['verification_status'], name='blockchain__verific_e02b1d_idx'), models.Index(fields=['data_quality'], name='blockchain__data_qu_430295_idx'), models.Index(fields=['created_at'], name='blockchain__created_54d082_idx')],
                'unique_together': {('tree', 'measurement_date', 'measurement_method')},
            },
        ),
        migrations.AddIndex(
            model_name='tree',
            index=models.Index(fields=['mint_address'], name='blockchain__mint_ad_14ce78_idx'),
        ),
        migrations.AddIndex(
            model_name='tree',
            index=models.Index(fields=['merkle_tree_address'], name='blockchain__merkle__c0b00b_idx'),
        ),
        migrations.AddIndex(
            model_name='tree',
            index=models.Index(fields=['asset_id'], name='blockchain__asset_i_5775b5_idx'),
        ),
        migrations.AddIndex(
            model_name='tree',
            index=models.Index(fields=['species', 'status'], name='blockchain__species_ed06fa_idx'),
        ),
        migrations.AddIndex(
            model_name='tree',
            index=models.Index(fields=['planted_date'], name='blockchain__planted_23bc1a_idx'),
        ),
        migrations.AddIndex(
            model_name='tree',
            index=models.Index(fields=['location_latitude', 'location_longitude'], name='blockchain__locatio_c13181_idx'),
        ),
        migrations.AddIndex(
            model_name='tree',
            index=models.Index(fields=['created_at'], name='blockchain__created_07bb96_idx'),
        ),
        migrations.AddIndex(
            model_name='tree',
            index=models.Index(fields=['updated_at'], name='blockchain__updated_aef61a_idx'),
        ),
        migrations.AddIndex(
            model_name='tree',
            index=models.Index(fields=['verification_status', 'status'], name='blockchain__verific_e196bc_idx'),
        ),
    ]
