# Generated by Django 4.2.7 on 2025-08-23 19:10

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('blockchain', '0004_alter_migrationlog_stack_trace'),
    ]

    operations = [
        migrations.CreateModel(
            name='BatchMigrationStatus',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the record was last updated')),
                ('batch_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the batch', primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled'), ('retrying', 'Retrying')], default='pending', help_text='Batch processing status', max_length=10)),
                ('batch_size', models.PositiveIntegerField(help_text='Number of items in this batch')),
                ('batch_index', models.PositiveIntegerField(help_text='Index of this batch in the overall job')),
                ('total_items', models.PositiveIntegerField(help_text='Total items to process in this batch')),
                ('processed_items', models.PositiveIntegerField(default=0, help_text='Number of items processed')),
                ('successful_items', models.PositiveIntegerField(default=0, help_text='Number of successfully processed items')),
                ('failed_items', models.PositiveIntegerField(default=0, help_text='Number of failed items')),
                ('skipped_items', models.PositiveIntegerField(default=0, help_text='Number of skipped items')),
                ('start_time', models.DateTimeField(blank=True, help_text='Batch processing start time', null=True)),
                ('end_time', models.DateTimeField(blank=True, help_text='Batch processing end time', null=True)),
                ('estimated_completion', models.DateTimeField(blank=True, help_text='Estimated completion time', null=True)),
                ('current_operation', models.CharField(blank=True, help_text='Current operation being performed', max_length=200)),
                ('error_message', models.TextField(blank=True, help_text='Error message if batch failed', null=True)),
                ('retry_count', models.PositiveIntegerField(default=0, help_text='Number of retry attempts')),
                ('processing_rate_per_second', models.FloatField(blank=True, help_text='Items processed per second', null=True)),
                ('memory_usage_mb', models.FloatField(blank=True, help_text='Peak memory usage in MB', null=True)),
                ('migration_job', models.ForeignKey(help_text='Associated migration job', on_delete=django.db.models.deletion.CASCADE, related_name='batch_statuses', to='blockchain.migrationjob')),
            ],
            options={
                'verbose_name': 'Batch Migration Status',
                'verbose_name_plural': 'Batch Migration Statuses',
                'db_table': 'blockchain_batch_migration_status',
                'ordering': ['batch_index'],
            },
        ),
        migrations.CreateModel(
            name='IntegrationTestResult',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the record was last updated')),
                ('test_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the test execution', primary_key=True, serialize=False)),
                ('scenario', models.CharField(choices=[('single_nft_migration', 'Single NFT Migration'), ('batch_migration', 'Batch Migration'), ('large_scale_migration', 'Large Scale Migration'), ('cache_performance', 'Cache Performance'), ('error_handling', 'Error Handling'), ('rollback_testing', 'Rollback Testing'), ('performance_benchmark', 'Performance Benchmark')], help_text='Test scenario type', max_length=30)),
                ('status', models.CharField(choices=[('passed', 'Passed'), ('failed', 'Failed'), ('error', 'Error'), ('running', 'Running'), ('cancelled', 'Cancelled')], default='running', help_text='Test execution status', max_length=10)),
                ('test_data_size', models.PositiveIntegerField(help_text='Size of test data used')),
                ('enable_caching', models.BooleanField(default=True, help_text='Whether caching was enabled during test')),
                ('enable_monitoring', models.BooleanField(default=True, help_text='Whether monitoring was enabled during test')),
                ('timeout_seconds', models.PositiveIntegerField(default=300, help_text='Test timeout in seconds')),
                ('start_time', models.DateTimeField(help_text='Test start time')),
                ('end_time', models.DateTimeField(blank=True, help_text='Test end time', null=True)),
                ('duration_seconds', models.FloatField(blank=True, help_text='Test duration in seconds', null=True)),
                ('success_rate', models.FloatField(default=0.0, help_text='Test success rate percentage')),
                ('total_nfts_processed', models.PositiveIntegerField(default=0, help_text='Total NFTs processed during test')),
                ('successful_nfts', models.PositiveIntegerField(default=0, help_text='Number of successfully processed NFTs')),
                ('failed_nfts', models.PositiveIntegerField(default=0, help_text='Number of failed NFT processing attempts')),
                ('pipeline_results', models.JSONField(default=list, help_text='Detailed pipeline execution results')),
                ('performance_metrics', models.JSONField(default=dict, help_text='Performance metrics collected during test')),
                ('error_message', models.TextField(blank=True, help_text='Error message if test failed', null=True)),
                ('warnings', models.JSONField(default=list, help_text='List of warnings encountered during test')),
                ('environment', models.CharField(default='development', help_text='Environment where test was executed', max_length=50)),
                ('executed_by', models.ForeignKey(blank=True, help_text='User who executed the test', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Integration Test Result',
                'verbose_name_plural': 'Integration Test Results',
                'db_table': 'blockchain_integration_test_result',
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='PerformanceMetric',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the record was last updated')),
                ('metric_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the metric', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Metric name', max_length=100)),
                ('category', models.CharField(default='general', help_text='Metric category', max_length=50)),
                ('value', models.FloatField(help_text='Metric value')),
                ('unit', models.CharField(default='count', help_text='Metric unit', max_length=20)),
                ('context', models.JSONField(default=dict, help_text='Additional context and tags')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, help_text='When the metric was recorded')),
                ('batch_migration', models.ForeignKey(blank=True, help_text='Associated batch migration', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='blockchain.batchmigrationstatus')),
                ('integration_test', models.ForeignKey(blank=True, help_text='Associated integration test', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='blockchain.integrationtestresult')),
            ],
            options={
                'verbose_name': 'Performance Metric',
                'verbose_name_plural': 'Performance Metrics',
                'db_table': 'blockchain_performance_metric',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['name', 'category'], name='blockchain__name_60f20f_idx'), models.Index(fields=['timestamp'], name='blockchain__timesta_42e885_idx'), models.Index(fields=['integration_test'], name='blockchain__integra_792715_idx'), models.Index(fields=['batch_migration'], name='blockchain__batch_m_a78c6a_idx'), models.Index(fields=['created_at'], name='blockchain__created_661f2a_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='integrationtestresult',
            index=models.Index(fields=['scenario', 'status'], name='blockchain__scenari_9ebf5d_idx'),
        ),
        migrations.AddIndex(
            model_name='integrationtestresult',
            index=models.Index(fields=['start_time'], name='blockchain__start_t_c58ed3_idx'),
        ),
        migrations.AddIndex(
            model_name='integrationtestresult',
            index=models.Index(fields=['success_rate'], name='blockchain__success_2f3ae2_idx'),
        ),
        migrations.AddIndex(
            model_name='integrationtestresult',
            index=models.Index(fields=['created_at'], name='blockchain__created_236f03_idx'),
        ),
        migrations.AddIndex(
            model_name='batchmigrationstatus',
            index=models.Index(fields=['migration_job', 'batch_index'], name='blockchain__migrati_828243_idx'),
        ),
        migrations.AddIndex(
            model_name='batchmigrationstatus',
            index=models.Index(fields=['status'], name='blockchain__status_e5d004_idx'),
        ),
        migrations.AddIndex(
            model_name='batchmigrationstatus',
            index=models.Index(fields=['start_time'], name='blockchain__start_t_1af290_idx'),
        ),
        migrations.AddIndex(
            model_name='batchmigrationstatus',
            index=models.Index(fields=['created_at'], name='blockchain__created_a5bb99_idx'),
        ),
    ]
