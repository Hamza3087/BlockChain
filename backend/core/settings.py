"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import structlog
import os
from dotenv import load_dotenv

import os

# Load environment variables
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")
if "testserver" not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append("testserver")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-change-me-in-production')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

# ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    "django_extensions",
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'common',
    'blockchain',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'common.middleware.GlobalExceptionMiddleware',
]

# System User Configuration
SYSTEM_USER_USERNAME = os.getenv("SYSTEM_USER_USERNAME", "system")

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME', 'replantworld'),
        'USER': os.getenv('DB_USER', 'postgres'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'postgres'),
        'HOST': os.getenv('DB_HOST', 'localhost'),
        'PORT': os.getenv('DB_PORT', '5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Redis Configuration
REDIS_URL = os.getenv('REDIS_URL', 'redis://localhost:6379/0')

# Cache Configuration
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': REDIS_URL,
    }
}

# CORS Configuration
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

CORS_ALLOW_CREDENTIALS = True

# REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'EXCEPTION_HANDLER': 'common.middleware.custom_exception_handler',
}

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'json': {
            '()': 'structlog.stdlib.ProcessorFormatter',
            'processor': structlog.dev.ConsoleRenderer(),  # fixed here
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'json',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}


# Structlog Configuration
import structlog

structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.processors.JSONRenderer()
    ],
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

# Solana Configuration
SOLANA_NETWORK = os.getenv('SOLANA_NETWORK', 'devnet')
SOLANA_RPC_URL = os.getenv('SOLANA_RPC_URL')
SOLANA_MAX_RETRIES = int(os.getenv('SOLANA_MAX_RETRIES', '3'))
SOLANA_RETRY_DELAY = float(os.getenv('SOLANA_RETRY_DELAY', '1.0'))
SOLANA_HEALTH_CHECK_INTERVAL = int(os.getenv('SOLANA_HEALTH_CHECK_INTERVAL', '60'))
SOLANA_TIMEOUT = int(os.getenv('SOLANA_TIMEOUT', '30'))
SOLANA_KEYPAIR_PATH = os.getenv('SOLANA_KEYPAIR_PATH', '~/.config/solana/id.json')

# Sei Blockchain Configuration
SEI_CHAIN_ID = os.getenv('SEI_CHAIN_ID', 'atlantic-2')
SEI_RPC_URL = os.getenv('SEI_RPC_URL', 'https://rest.atlantic-2.seinetwork.io')
SEI_ADMIN_MNEMONIC = os.getenv('SEI_ADMIN_MNEMONIC', '')
SEI_NFT_ADDRESS = os.getenv('SEI_NFT_ADDRESS', '')
SEI_NFT_MULTI_CODE_ID = int(os.getenv('SEI_NFT_MULTI_CODE_ID', '5649'))
SEI_MAX_RETRIES = int(os.getenv('SEI_MAX_RETRIES', '3'))
SEI_RETRY_DELAY = float(os.getenv('SEI_RETRY_DELAY', '1.0'))
SEI_TIMEOUT = int(os.getenv('SEI_TIMEOUT', '30'))
SEI_BATCH_SIZE = int(os.getenv('SEI_BATCH_SIZE', '100'))

# Day 6 - Integration & System Testing Configuration
INTEGRATION_TESTING = {
    'enabled': os.getenv('INTEGRATION_TESTING_ENABLED', 'true').lower() == 'true',
    'batch_size': int(os.getenv('INTEGRATION_BATCH_SIZE', '10')),
    'max_concurrent_jobs': int(os.getenv('INTEGRATION_MAX_CONCURRENT_JOBS', '3')),
    'test_data_retention_days': int(os.getenv('INTEGRATION_TEST_DATA_RETENTION_DAYS', '7')),
    'performance_monitoring': os.getenv('INTEGRATION_PERFORMANCE_MONITORING', 'true').lower() == 'true',
}

# Batch Migration Configuration
BATCH_MIGRATION = {
    'default_batch_size': int(os.getenv('BATCH_MIGRATION_DEFAULT_SIZE', '50')),
    'max_batch_size': int(os.getenv('BATCH_MIGRATION_MAX_SIZE', '500')),
    'concurrent_batches': int(os.getenv('BATCH_MIGRATION_CONCURRENT_BATCHES', '5')),
    'retry_attempts': int(os.getenv('BATCH_MIGRATION_RETRY_ATTEMPTS', '3')),
    'retry_delay_seconds': int(os.getenv('BATCH_MIGRATION_RETRY_DELAY', '30')),
    'progress_update_interval': int(os.getenv('BATCH_MIGRATION_PROGRESS_INTERVAL', '10')),
}

# Redis Caching Configuration
REDIS_CACHE_CONFIG = {
    'default_timeout': int(os.getenv('REDIS_DEFAULT_TIMEOUT', '300')),  # 5 minutes
    'nft_data_timeout': int(os.getenv('REDIS_NFT_DATA_TIMEOUT', '1800')),  # 30 minutes
    'migration_job_timeout': int(os.getenv('REDIS_MIGRATION_JOB_TIMEOUT', '3600')),  # 1 hour
    'solana_data_timeout': int(os.getenv('REDIS_SOLANA_DATA_TIMEOUT', '600')),  # 10 minutes
    'key_prefix': os.getenv('REDIS_KEY_PREFIX', 'replantworld'),
    'version': int(os.getenv('REDIS_CACHE_VERSION', '1')),
}

# Performance Monitoring Configuration
PERFORMANCE_MONITORING = {
    'enabled': os.getenv('PERFORMANCE_MONITORING_ENABLED', 'true').lower() == 'true',
    'slow_query_threshold_ms': int(os.getenv('PERFORMANCE_SLOW_QUERY_THRESHOLD', '1000')),
    'memory_usage_threshold_mb': int(os.getenv('PERFORMANCE_MEMORY_THRESHOLD', '512')),
    'metrics_retention_days': int(os.getenv('PERFORMANCE_METRICS_RETENTION_DAYS', '30')),
}

# Testing Configuration
TESTING = {
    'use_test_database': os.getenv('USE_TEST_DATABASE', 'false').lower() == 'true',
    'test_data_fixtures': os.getenv('TEST_DATA_FIXTURES', 'blockchain/fixtures/test_data.json'),
    'mock_external_apis': os.getenv('MOCK_EXTERNAL_APIS', 'true').lower() == 'true',
    'test_timeout_seconds': int(os.getenv('TEST_TIMEOUT_SECONDS', '300')),
}

# Celery Configuration (for async task processing)
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', REDIS_URL)
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', REDIS_URL)
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = int(os.getenv('CELERY_TASK_TIME_LIMIT', '1800'))  # 30 minutes
CELERY_WORKER_PREFETCH_MULTIPLIER = int(os.getenv('CELERY_WORKER_PREFETCH_MULTIPLIER', '1'))
